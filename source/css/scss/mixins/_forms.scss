// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$input-focus-border-color` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus($ignore-warning: false) {
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    @if $enable-shadows {
      @include box-shadow($input-box-shadow, $input-focus-box-shadow);
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: $input-focus-box-shadow;
    }
  }
  @include deprecate("The `form-control-focus()` mixin", "v4.4.0", "v5", $ignore-warning);
}

// This mixin uses an `if()` technique to be compatible with Dart Sass
// See https://github.com/sass/sass/issues/1873#issuecomment-152293725 for more details
@mixin form-validation-state-selector($state) {
  @if ($state == "invalid") {
    .was-validated #{if(&, "&", "")}:#{$state},
    .was-validated .custom-control:has(:#{$state}),
    #{if(&, "&", "")}.is-#{$state},
    #{if(&, "&", "")}.form-group:has(.is-#{$state}) {
      @content;
    }
  } @else {
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  }
}


@mixin form-validation-state($state, $color, $icon) {
  $text-color: $color;
  @if($state == 'invalid') {
    $text-color: $negative-dark;
  }

  .#{$state}-feedback {
    display: none;
    width: 100%;
    font-weight: $font-weight-bold;
    line-height: $line-height-sm;
    font-size: $font-size-sm;
    color: $text-color;
    align-items: start;
    .icon {
      @include icon-color($text-color);
      margin-top: .125rem;
      margin-right: .25rem;
    }
  }

  .#{$state}-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    max-width: 100%; // Contain to parent when possible
    padding: $form-feedback-tooltip-padding-y $form-feedback-tooltip-padding-x;
    margin-top: .1rem;
    @include font-size($form-feedback-tooltip-font-size);
    line-height: $form-feedback-tooltip-line-height;
    color: color-yiq($color);
    background-color: rgba($color, $form-feedback-tooltip-opacity);
    @include border-radius($form-feedback-tooltip-border-radius);
  }

  @include form-validation-state-selector($state) {
    ~ .#{$state}-tooltip {
      display: block;
    }
    ~ .#{$state}-feedback,
    > .#{$state}-feedback {
      display: flex;
    }

  }

  .form-control {
    @include form-validation-state-selector($state) {
      border-color: $color;

      @if $enable-validation-icons {
        padding-right: 2.5rem;
        background-image: $icon;
        background-repeat: no-repeat;
        background-position: center right .5rem;
        background-size: $icon-md;
      }

      &:focus {
        border-color: $color;
      }
      // form-group avec un custom-control invalid
      :has(.custom-control-input:invalid) {
        .invalid-feedback {
          display: flex;
        }
      }

    }

  }

  // stylelint-disable-next-line selector-no-qualifying-type
  textarea.form-control {
    @include form-validation-state-selector($state) {
      @if $enable-validation-icons {
        padding-right: 2.5rem;
        background-position: top .5625rem right .5625rem;
      }
    }
  }

  // Small input needs smaller icons and right padding
  .form-group-sm {
    .form-control {
      @include form-validation-state-selector($state) {
        @if $enable-validation-icons {
          padding-right: 2rem;
          background-position: $icon-xs;
        }
      }
    }

    textarea.form-control {
      @if $enable-validation-icons {
        padding-right: 2.5rem;
        background-position: top .4375rem right .4375rem;
      }
    }
  }

  .form-group-lg {
    .form-control {
      @include form-validation-state-selector($state) {
        @if $enable-validation-icons {
          padding-right: 3.375rem;
          background-position: center right .9375rem;
        }
      }
    }

    textarea.form-control {
      @if $enable-validation-icons {
        background-position: top .9375rem right .9375rem;
      }
    }
  }

  .custom-select {
    @include form-validation-state-selector($state) {
      border-color: $color;

      &:focus {
        border-color: $color;
      }
    }
  }

  .form-check-input {
    @include form-validation-state-selector($state) {
      ~ .form-check-label {
        color: $color;
      }

      ~ .#{$state}-tooltip {
        display: block;
      }

      ~ .#{$state}-feedback {
        display: flex;
      }
    }
  }

  .custom-control-input {
    @include form-validation-state-selector($state) {
      ~ .custom-control-label {
        color: $text-color;

        &::before {
          border-color: $color;
        }
      }

      &:checked {
        ~ .custom-control-label::before {
          border-color: lighten($color, 10%);
          @include gradient-bg(lighten($color, 10%));
        }
      }

      &:focus {
        ~ .custom-control-label::before {
          box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
        }

        &:not(:checked) ~ .custom-control-label::before {
          border-color: $color;
        }
      }
    }
  }

  // custom file
  .custom-file-input {
    @include form-validation-state-selector($state) {
      ~ .custom-file-label {
        border-color: $color;
      }

      &:focus {
        ~ .custom-file-label {
          border-color: $color;
        }
      }
    }
  }
}
