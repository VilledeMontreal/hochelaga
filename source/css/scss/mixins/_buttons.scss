// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($background, $border, $color: color-yiq($background), $hover-background: $action-darker, $hover-border: $action-darker, $hover-color: $white, $active-background: $action-darker, $active-border: $action-darker, $active-color: $white, $reversed: false, $box-shadow-color: false) {

  color: $color;
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);
  &:not(:disabled):not(.disabled) {
    @include hover-focus {
      color: $hover-color;
      @include gradient-bg($hover-background);
      border-color: $hover-border;
      .icon {
        @include icon-color($hover-color);
      }
    }
  }

  // Icon is always the same color as button text
  .icon {
    @include icon-color($color);
    margin-top: -.1875rem;
    margin-bottom: -.1875rem;
  }

  .utility-icon {
    path {
      fill: $color;
    }
  }

  // Change focus and active focus states if reversed
  @if $reversed {
    &:focus,
    &.focus {
      box-shadow: $input-btn-reverse-focus-box-shadow;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {

      &:focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: $input-btn-reverse-focus-box-shadow;
      }
    }
  } @else {
    &:focus,
    &.focus {
      box-shadow: $btn-focus-box-shadow;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
      color: $active-color;
      background-color: $active-background;
      @if $enable-gradients {
        background-image: none; // Remove the gradient for the pressed/active state
      }
      border-color: $active-border;

      &:focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: $btn-focus-box-shadow;
      }
    }
  }

  @if $box-shadow-color {
    // Scoped dialog-box-shadow variable definition
    $custom-box-shadow: 0 0 0 $input-btn-focus-width rgba($box-shadow-color, .3);

    &:focus,
    &.focus {
      box-shadow: $custom-box-shadow;
    }

    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active {

      &:focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: $custom-box-shadow;
      }
    }
  }

}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  @include font-size($font-size);
  line-height: $line-height;
  // Manually declare to provide an override to the browser default
  @if $enable-rounded {
    border-radius: $border-radius;
  } @else {
    border-radius: 0;
  }
}

@mixin button-collapse($icon-color, $icon-hover-color: $icon-color) {
  &:after {
    background-color: $icon-color;
  }
  &.collapsed:after {
    background-color: $icon-color;
  }
  @include hover-focus {
    &:after {
      background-color: $icon-hover-color;
      @include transition($btn-transition);
    }
    &.collapsed:after {
      background-color: $icon-hover-color;
      @include transition($btn-transition);
    }
  }
}

// Mixin to reset buttons properties
// AKA plain button
@mixin button-reset() {
  color: inherit;
  font: inherit;
  text-transform: none;
  background-color: transparent;
  text-decoration: none;
  border: 0;
  margin: 0;
  overflow: visible;

  @include hover-focus {
    background-color: transparent;
    text-decoration: none;
    border: 0;
  }
}
